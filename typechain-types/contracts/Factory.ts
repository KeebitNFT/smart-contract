/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface FactoryInterface extends utils.Interface {
  functions: {
    "createAndList(string,string,uint256[],uint256)": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createAndList" | "tokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createAndList",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createAndList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;

  events: {
    "TokenDeployed(address,address)": EventFragment;
    "TokenMinted(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMinted"): EventFragment;
}

export interface TokenDeployedEventObject {
  owner: string;
  tokenContract: string;
}
export type TokenDeployedEvent = TypedEvent<
  [string, string],
  TokenDeployedEventObject
>;

export type TokenDeployedEventFilter = TypedEventFilter<TokenDeployedEvent>;

export interface TokenMintedEventObject {
  owner: string;
  tokenContract: string;
  amount: BigNumber;
}
export type TokenMintedEvent = TypedEvent<
  [string, string, BigNumber],
  TokenMintedEventObject
>;

export type TokenMintedEventFilter = TypedEventFilter<TokenMintedEvent>;

export interface Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createAndList(
      _contractName: PromiseOrValue<string>,
      _uri: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  createAndList(
    _contractName: PromiseOrValue<string>,
    _uri: PromiseOrValue<string>,
    _ids: PromiseOrValue<BigNumberish>[],
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    createAndList(
      _contractName: PromiseOrValue<string>,
      _uri: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "TokenDeployed(address,address)"(
      owner?: null,
      tokenContract?: null
    ): TokenDeployedEventFilter;
    TokenDeployed(owner?: null, tokenContract?: null): TokenDeployedEventFilter;

    "TokenMinted(address,address,uint256)"(
      owner?: null,
      tokenContract?: null,
      amount?: null
    ): TokenMintedEventFilter;
    TokenMinted(
      owner?: null,
      tokenContract?: null,
      amount?: null
    ): TokenMintedEventFilter;
  };

  estimateGas: {
    createAndList(
      _contractName: PromiseOrValue<string>,
      _uri: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createAndList(
      _contractName: PromiseOrValue<string>,
      _uri: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
