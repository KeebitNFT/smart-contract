/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Marketplace {
  export type MarketNFTStruct = {
    itemId: PromiseOrValue<BigNumberish>;
    nftContract: PromiseOrValue<string>;
    collectionName: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    isOfficial: PromiseOrValue<boolean>;
    isOnList: PromiseOrValue<boolean>;
  };

  export type MarketNFTStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    boolean,
    boolean
  ] & {
    itemId: BigNumber;
    nftContract: string;
    collectionName: string;
    tokenId: BigNumber;
    price: BigNumber;
    seller: string;
    owner: string;
    isOfficial: boolean;
    isOnList: boolean;
  };
}

export interface MarketplaceInterface extends utils.Interface {
  functions: {
    "buyNFT(uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "feePercent()": FunctionFragment;
    "getListedNFTs()": FunctionFragment;
    "getMyListedNFTs()": FunctionFragment;
    "itemCount()": FunctionFragment;
    "itemOnList()": FunctionFragment;
    "listNFTs(address,uint256[],uint256)": FunctionFragment;
    "nfts(uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unlistNFT(uint256)": FunctionFragment;
    "updatePrice(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyNFT"
      | "factory"
      | "feePercent"
      | "getListedNFTs"
      | "getMyListedNFTs"
      | "itemCount"
      | "itemOnList"
      | "listNFTs"
      | "nfts"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "owner"
      | "supportsInterface"
      | "unlistNFT"
      | "updatePrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyNFT",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListedNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyListedNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "itemCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "itemOnList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listNFTs",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nfts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlistNFT",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "buyNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getListedNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyListedNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "itemCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "itemOnList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listNFTs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nfts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlistNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;

  events: {
    "NFTBought(uint256,address,string,uint256,uint256,address,address)": EventFragment;
    "NFTListed(uint256,address,string,uint256,uint256,address,address)": EventFragment;
    "NFTUnlisted(uint256,address,string,uint256,uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NFTBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTUnlisted"): EventFragment;
}

export interface NFTBoughtEventObject {
  itemId: BigNumber;
  nftContract: string;
  collectionName: string;
  tokenId: BigNumber;
  price: BigNumber;
  seller: string;
  owner: string;
}
export type NFTBoughtEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, string, string],
  NFTBoughtEventObject
>;

export type NFTBoughtEventFilter = TypedEventFilter<NFTBoughtEvent>;

export interface NFTListedEventObject {
  itemId: BigNumber;
  nftContract: string;
  collectionName: string;
  tokenId: BigNumber;
  price: BigNumber;
  seller: string;
  owner: string;
}
export type NFTListedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, string, string],
  NFTListedEventObject
>;

export type NFTListedEventFilter = TypedEventFilter<NFTListedEvent>;

export interface NFTUnlistedEventObject {
  itemId: BigNumber;
  nftContract: string;
  collectionName: string;
  tokenId: BigNumber;
  price: BigNumber;
  seller: string;
  owner: string;
}
export type NFTUnlistedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, string, string],
  NFTUnlistedEventObject
>;

export type NFTUnlistedEventFilter = TypedEventFilter<NFTUnlistedEvent>;

export interface Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyNFT(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    feePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    getListedNFTs(
      overrides?: CallOverrides
    ): Promise<[Marketplace.MarketNFTStructOutput[]]>;

    getMyListedNFTs(
      overrides?: CallOverrides
    ): Promise<[Marketplace.MarketNFTStructOutput[]]>;

    itemCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    itemOnList(overrides?: CallOverrides): Promise<[BigNumber]>;

    listNFTs(
      _nftContract: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        boolean
      ] & {
        itemId: BigNumber;
        nftContract: string;
        collectionName: string;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        owner: string;
        isOfficial: boolean;
        isOnList: boolean;
      }
    >;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unlistNFT(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePrice(
      _itemId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buyNFT(
    _itemId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  feePercent(overrides?: CallOverrides): Promise<BigNumber>;

  getListedNFTs(
    overrides?: CallOverrides
  ): Promise<Marketplace.MarketNFTStructOutput[]>;

  getMyListedNFTs(
    overrides?: CallOverrides
  ): Promise<Marketplace.MarketNFTStructOutput[]>;

  itemCount(overrides?: CallOverrides): Promise<BigNumber>;

  itemOnList(overrides?: CallOverrides): Promise<BigNumber>;

  listNFTs(
    _nftContract: PromiseOrValue<string>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nfts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      boolean,
      boolean
    ] & {
      itemId: BigNumber;
      nftContract: string;
      collectionName: string;
      tokenId: BigNumber;
      price: BigNumber;
      seller: string;
      owner: string;
      isOfficial: boolean;
      isOnList: boolean;
    }
  >;

  onERC1155BatchReceived(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unlistNFT(
    _itemId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePrice(
    _itemId: PromiseOrValue<BigNumberish>,
    _newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyNFT(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getListedNFTs(
      overrides?: CallOverrides
    ): Promise<Marketplace.MarketNFTStructOutput[]>;

    getMyListedNFTs(
      overrides?: CallOverrides
    ): Promise<Marketplace.MarketNFTStructOutput[]>;

    itemCount(overrides?: CallOverrides): Promise<BigNumber>;

    itemOnList(overrides?: CallOverrides): Promise<BigNumber>;

    listNFTs(
      _nftContract: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        boolean
      ] & {
        itemId: BigNumber;
        nftContract: string;
        collectionName: string;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        owner: string;
        isOfficial: boolean;
        isOnList: boolean;
      }
    >;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unlistNFT(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePrice(
      _itemId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NFTBought(uint256,address,string,uint256,uint256,address,address)"(
      itemId?: null,
      nftContract?: null,
      collectionName?: null,
      tokenId?: null,
      price?: null,
      seller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): NFTBoughtEventFilter;
    NFTBought(
      itemId?: null,
      nftContract?: null,
      collectionName?: null,
      tokenId?: null,
      price?: null,
      seller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): NFTBoughtEventFilter;

    "NFTListed(uint256,address,string,uint256,uint256,address,address)"(
      itemId?: null,
      nftContract?: null,
      collectionName?: null,
      tokenId?: null,
      price?: null,
      seller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): NFTListedEventFilter;
    NFTListed(
      itemId?: null,
      nftContract?: null,
      collectionName?: null,
      tokenId?: null,
      price?: null,
      seller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): NFTListedEventFilter;

    "NFTUnlisted(uint256,address,string,uint256,uint256,address,address)"(
      itemId?: null,
      nftContract?: null,
      collectionName?: null,
      tokenId?: null,
      price?: null,
      seller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): NFTUnlistedEventFilter;
    NFTUnlisted(
      itemId?: null,
      nftContract?: null,
      collectionName?: null,
      tokenId?: null,
      price?: null,
      seller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): NFTUnlistedEventFilter;
  };

  estimateGas: {
    buyNFT(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getListedNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    getMyListedNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    itemCount(overrides?: CallOverrides): Promise<BigNumber>;

    itemOnList(overrides?: CallOverrides): Promise<BigNumber>;

    listNFTs(
      _nftContract: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlistNFT(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePrice(
      _itemId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyNFT(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getListedNFTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMyListedNFTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    itemCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    itemOnList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listNFTs(
      _nftContract: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlistNFT(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePrice(
      _itemId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
